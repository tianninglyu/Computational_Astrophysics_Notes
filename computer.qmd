# 计算机基础
## CPU基础知识

## 数在计算机中的表示
### 整数 
整数在计算机中以位(bit)为单位编码。1字节(byte)=8位(bits).一个整型变量可以表示多大范围的数，取决于它占用多少字节，以及它是有符号还是无符号的。有符号整数会占用一位表示符号，因此一个占据N位的有符号整数可以表示$-2^{N-1}$ ~ $2^{N-1}-1$ 的整数，而无符号整数则可表示$0$ ~ $2^{N}$. 下表整理了天文工作者科研中最常用的几种编程语言里不同种类的整型变量的特性。

| 语言          | 类型                | 常见字节数                                 | 位数      | 取值范围                                                                                               |
| ----------- | ----------------- | ------------------------------------- | ------- | -------------------------------------------------------------------------------------------------- |
| **C / C++** | `char`            | 1                                     | 8       | 有符号：-128 \~ 127<br>无符号：0 \~ 255                                                                    |
|             | `short`           | 2                                     | 16      | 有符号：-32,768 \~ 32,767<br>无符号：0 \~ 65,535                                                           |
|             | `int`             | 4                                     | 32      | 有符号：-2,147,483,648 \~ 2,147,483,647<br>无符号：0 \~ 4,294,967,295                                      |
|             | `long`            | 8 (在 64 位 LP64) / 4 (在 Windows LLP64) | 64 / 32 | -2^63 \~ 2^63-1 或 -2^31 \~ 2^31-1                                                                  |
|             | `long long`       | 8                                     | 64      | 有符号：-9,223,372,036,854,775,808 \~ 9,223,372,036,854,775,807<br>无符号：0 \~ 18,446,744,073,709,551,615 |
| **Fortran** | `INTEGER(KIND=1)` | 1                                     | 8       | -128 \~ 127                                                                                        |
|             | `INTEGER(KIND=2)` | 2                                     | 16      | -32,768 \~ 32,767                                                                                  |
|             | `INTEGER(KIND=4)` | 4                                     | 32      | -2,147,483,648 \~ 2,147,483,647                                                                    |
|             | `INTEGER(KIND=8)` | 8                                     | 64      | -9,223,372,036,854,775,808 \~ 9,223,372,036,854,775,807                                            |
| **Python**  | `int`             | 不固定（内部按 28/30 位一组存储）                  | 理论无限    | 仅受内存限制。例如：`2**1000` 也能正常表示                                                                         |

对于极大规模的数值模拟，整型变量精度的选择对于存储空间的消耗有着重大影响。例如Gadget-4代码，支持用户选择用32位还是64位整数来表示粒子的ID. 此时模拟执行者应该进行计算，如果模拟的粒子数没有超出32位整数可以表示的范围，就应当使用32位整数来存储粒子ID，可以节约一半的存储。

### 浮点数 
计算机中储存浮点数的基本原理是将其表示为**二进制的“科学计数法”**：
$$
x=sM2^e
$$

其中$s$意为"sign"，符号；$M$意为"mantissa"，尾数；$e$意为"exponent"，指数。不同精度的浮点数，分配给它们的位数也不同。在IEEE-754标准中：

**单精度 (single precision)**: 1s+8e+23M

**双精度 (double precision)**: 1s+11e+52M

**四精度 (quadruple decision)**: 1s+15e+112M

对于天体物理数值模拟，大部分时候采用双精度计算；但AI训练等场景可能就更需要单精度计算。针对不同应用场景的算力卡(GPU/DCU)会因地制宜地增强应用频率高的计算单元，削弱应用频率低的计算单元。在规划大规模算力任务时，一定要根据自己的需求选择合适的集群硬件配置。

## 误差
### 舍入误差 (Round off Errors)
浮点数在计算机中占的位数是有限的，这使得浮点数在计算机中无法被完全精确地表示。

```{python}
1e16 + 1 - 1e16
```

